{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "entryPoint_",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "multicallForwarder",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "erc6551Registry",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_guardian",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "AccountLocked",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ContractCreationFailed",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Create2EmptyBytecode",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "Create2FailedDeployment",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "balance",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "needed",
						"type": "uint256"
					}
				],
				"name": "Create2InsufficientBalance",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ECDSAInvalidSignature",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "length",
						"type": "uint256"
					}
				],
				"name": "ECDSAInvalidSignatureLength",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "s",
						"type": "bytes32"
					}
				],
				"name": "ECDSAInvalidSignatureS",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ExceedsMaxLockTime",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidAccountProof",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidERC6551Registry",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidEntryPoint",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidInput",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidMulticallForwarder",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidOperation",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotAuthorized",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "OwnershipCycle",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "lockedUntil",
						"type": "uint256"
					}
				],
				"name": "LockUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes4",
						"name": "selector",
						"type": "bytes4"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "implementation",
						"type": "address"
					}
				],
				"name": "OverrideUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "caller",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bool",
						"name": "hasPermission",
						"type": "bool"
					}
				],
				"name": "PermissionUpdated",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [],
				"name": "entryPoint",
				"outputs": [
					{
						"internalType": "contract IEntryPoint",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "erc6551Registry",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "uint8",
						"name": "operation",
						"type": "uint8"
					}
				],
				"name": "execute",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "to",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "value",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							},
							{
								"internalType": "uint8",
								"name": "operation",
								"type": "uint8"
							}
						],
						"internalType": "struct BatchExecutor.Operation[]",
						"name": "operations",
						"type": "tuple[]"
					}
				],
				"name": "executeBatch",
				"outputs": [
					{
						"internalType": "bytes[]",
						"name": "",
						"type": "bytes[]"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					},
					{
						"internalType": "uint8",
						"name": "operation",
						"type": "uint8"
					},
					{
						"components": [
							{
								"internalType": "bytes32",
								"name": "salt",
								"type": "bytes32"
							},
							{
								"internalType": "address",
								"name": "tokenContract",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "tokenId",
								"type": "uint256"
							}
						],
						"internalType": "struct NestedAccountExecutor.ERC6551AccountInfo[]",
						"name": "proof",
						"type": "tuple[]"
					}
				],
				"name": "executeNested",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "extcall",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "result",
						"type": "bytes"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "bytecode",
						"type": "bytes"
					}
				],
				"name": "extcreate",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "value",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "salt",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "bytecode",
						"type": "bytes"
					}
				],
				"name": "extcreate2",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "slot",
						"type": "bytes32"
					}
				],
				"name": "extsload",
				"outputs": [
					{
						"internalType": "bytes32",
						"name": "value",
						"type": "bytes32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getNonce",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isLocked",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "forwarder",
						"type": "address"
					}
				],
				"name": "isTrustedForwarder",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "hash",
						"type": "bytes32"
					},
					{
						"internalType": "bytes",
						"name": "signature",
						"type": "bytes"
					}
				],
				"name": "isValidSignature",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "magicValue",
						"type": "bytes4"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "signer",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "isValidSigner",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "magicValue",
						"type": "bytes4"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_lockedUntil",
						"type": "uint256"
					}
				],
				"name": "lock",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lockedUntil",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[]",
						"name": "",
						"type": "uint256[]"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC1155BatchReceived",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC1155Received",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"name": "onERC721Received",
				"outputs": [
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "bytes4",
						"name": "",
						"type": "bytes4"
					}
				],
				"name": "overrides",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"name": "permissions",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4[]",
						"name": "selectors",
						"type": "bytes4[]"
					},
					{
						"internalType": "address[]",
						"name": "implementations",
						"type": "address[]"
					}
				],
				"name": "setOverrides",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "callers",
						"type": "address[]"
					},
					{
						"internalType": "bool[]",
						"name": "_permissions",
						"type": "bool[]"
					}
				],
				"name": "setPermissions",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "state",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceId",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "tokenIn",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "tokenOut",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amountIn",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "gasFee",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "beepFee",
						"type": "uint256"
					}
				],
				"name": "swapExactInputSingle",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amountOut",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "token",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "chainId",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "tokenContract",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "trustedForwarder",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "sender",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "nonce",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "initCode",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "callData",
								"type": "bytes"
							},
							{
								"internalType": "uint256",
								"name": "callGasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "verificationGasLimit",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "preVerificationGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxFeePerGas",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "maxPriorityFeePerGas",
								"type": "uint256"
							},
							{
								"internalType": "bytes",
								"name": "paymasterAndData",
								"type": "bytes"
							},
							{
								"internalType": "bytes",
								"name": "signature",
								"type": "bytes"
							}
						],
						"internalType": "struct UserOperation",
						"name": "userOp",
						"type": "tuple"
					},
					{
						"internalType": "bytes32",
						"name": "userOpHash",
						"type": "bytes32"
					},
					{
						"internalType": "uint256",
						"name": "missingAccountFunds",
						"type": "uint256"
					}
				],
				"name": "validateUserOp",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "validationData",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"errors": {
				"Create2EmptyBytecode()": [
					{
						"details": "There's no code to deploy."
					}
				],
				"Create2FailedDeployment()": [
					{
						"details": "The deployment failed."
					}
				],
				"Create2InsufficientBalance(uint256,uint256)": [
					{
						"details": "Not enough balance for performing a CREATE2 deploy."
					}
				],
				"ECDSAInvalidSignature()": [
					{
						"details": "The signature derives the `address(0)`."
					}
				],
				"ECDSAInvalidSignatureLength(uint256)": [
					{
						"details": "The signature has an invalid length."
					}
				],
				"ECDSAInvalidSignatureS(bytes32)": [
					{
						"details": "The signature has an S value that is in the upper half order."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"constructor": {
					"params": {
						"_guardian": "The AccountGuardian address",
						"entryPoint_": "The ERC-4337 EntryPoint address",
						"erc6551Registry": "The ERC-6551 Registry address",
						"multicallForwarder": "The MulticallForwarder address"
					}
				},
				"entryPoint()": {
					"details": "See {BaseERC4337Account-entryPoint}"
				},
				"execute(address,uint256,bytes,uint8)": {
					"params": {
						"data": "Encoded calldata of operation",
						"operation": "Operation type (0=CALL, 1=DELEGATECALL, 2=CREATE, 3=CREATE2)",
						"to": "Account to operate on",
						"value": "Value to send with operation"
					}
				},
				"executeBatch((address,uint256,bytes,uint8)[])": {
					"params": {
						"operations": "Operations to execute"
					}
				},
				"executeNested(address,uint256,bytes,uint8,(bytes32,address,uint256)[])": {
					"params": {
						"data": "Encoded calldata of operation",
						"operation": "Operation type (0=CALL, 1=DELEGATECALL, 2=CREATE, 3=CREATE2)",
						"proof": "An array of ERC-6551 account information specifying the ownership path from this account to its parent",
						"to": "Account to operate on",
						"value": "Value to send with operation"
					}
				},
				"extcall(address,uint256,bytes)": {
					"details": "Allows the sandbox contract to execute low-level calls from this account"
				},
				"extcreate(uint256,bytes)": {
					"details": "Allows the sandbox contract to create contracts on behalf of this account"
				},
				"extcreate2(uint256,bytes32,bytes)": {
					"details": "Allows the sandbox contract to create deterministic contracts on behalf of this account"
				},
				"extsload(bytes32)": {
					"details": "Allows arbitrary storage reads on this account from external contracts"
				},
				"isLocked()": {
					"details": "Returns the current lock status of the account as a boolean"
				},
				"isTrustedForwarder(address)": {
					"details": "Indicates whether any particular address is the trusted forwarder."
				},
				"isValidSignature(bytes32,bytes)": {
					"details": "See {IERC1721-isValidSignature}"
				},
				"isValidSigner(address,bytes)": {
					"details": "See: {IERC6551Account-isValidSigner}"
				},
				"lock(uint256)": {
					"details": "Locks the account until a certain timestamp",
					"params": {
						"_lockedUntil": "The time at which this account will no longer be locke"
					}
				},
				"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
					"details": "called whenever a batch of ERC-1155 tokens are received. Can be overriden via Overridable."
				},
				"onERC1155Received(address,address,uint256,uint256,bytes)": {
					"details": "called whenever an ERC-1155 token is received. Can be overriden via Overridable."
				},
				"onERC721Received(address,address,uint256,bytes)": {
					"details": "called whenever an ERC-721 token is received. Can be overriden via Overridable. Reverts if token being received is the token the account is bound to."
				},
				"owner()": {
					"details": "Returns zero address if token is on a foreign chain or token contract does not exist",
					"returns": {
						"_0": "address The address which owns the token this account is bound to"
					}
				},
				"setOverrides(bytes4[],address[])": {
					"details": "Sets the implementation address for a given array of function selectors. Can only be called by the root owner of the account",
					"params": {
						"implementations": "Array of implementation address corresponding to selectors",
						"selectors": "Array of selectors to override"
					}
				},
				"setPermissions(address[],bool[])": {
					"details": "Grants or revokes execution permissions for a given array of callers on this account. Can only be called by the root owner of the account",
					"params": {
						"_permissions": "Array of booleans, true if execution permissions should be granted, false if permissions should be revoked",
						"callers": "Array of callers to grant permissions to"
					}
				},
				"state()": {
					"details": "See: {IERC6551Account-state}"
				},
				"supportsInterface(bytes4)": {
					"details": "Can be overriden via Overridable except for base interfaces.",
					"params": {
						"interfaceId": "The interface ID to query for"
					},
					"returns": {
						"_0": "bool True if the interface is supported, false otherwise"
					}
				},
				"token()": {
					"details": "See: {IERC6551Account-token}"
				},
				"trustedForwarder()": {
					"details": "Returns the address of the trusted forwarder."
				},
				"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
					"params": {
						"missingAccountFunds": "- The amount of funds missing from the account                              to pay for the user operation.",
						"userOp": "- The user operation to validate.",
						"userOpHash": "- The hash of the user operation."
					}
				}
			},
			"title": "Tokenbound ERC-6551 Account Implementation",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"execute(address,uint256,bytes,uint8)": {
					"notice": "Executes a low-level operation from this account if the caller is a valid executor"
				},
				"executeBatch((address,uint256,bytes,uint8)[])": {
					"notice": "Executes a batch of operations if the caller is authorized"
				},
				"executeNested(address,uint256,bytes,uint8,(bytes32,address,uint256)[])": {
					"notice": "Executes a low-level operation from this account if the caller is a valid signer on the parent TBA specified in the proof"
				},
				"getNonce()": {
					"notice": "Return the account nonce. This method returns the next sequential nonce. For a nonce of a specific key, use `entrypoint.getNonce(account, key)`"
				},
				"lockedUntil()": {
					"notice": "The timestamp at which this account will be unlocked"
				},
				"owner()": {
					"notice": "Returns the owner of the token this account is bound to (if available)"
				},
				"supportsInterface(bytes4)": {
					"notice": "Returns whether a given ERC165 interface ID is supported"
				},
				"validateUserOp((address,uint256,bytes,bytes,uint256,uint256,uint256,uint256,uint256,bytes,bytes),bytes32,uint256)": {
					"notice": "Validate user's signature and nonce. Subclass doesn't need to override this method. Instead, it should override the specific internal validation methods."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/contracts-main/src/AccountV3.sol": "AccountV3"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/interfaces/IERC1271.sol": {
			"keccak256": "0x85a45f3f10014a0f8be41157a32b6a5f905753ea64a4b64e29fc12b7deeecf39",
			"license": "MIT",
			"urls": [
				"bzz-raw://c3c74009ce36136b36c77c23935b8e4a7b4f253be2da2be4fb4a916b1ce43743",
				"dweb:/ipfs/QmcH36v3iN7SJJuF73AunLR2LtNxhVJ1wm63ph4dPZ4pcL"
			]
		},
		"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
			"keccak256": "0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7",
			"license": "MIT",
			"urls": [
				"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f",
				"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt"
			]
		},
		"@openzeppelin/contracts/metatx/ERC2771Context.sol": {
			"keccak256": "0x3cf982133d4c9c92e6cd0f3dd8399791b7858c09dfe6ab5c6073e7f24475aa78",
			"license": "MIT",
			"urls": [
				"bzz-raw://eb2e41b4db6b6020a4406b0bc1c3e959554321650a392c30ee506e464abe6f27",
				"dweb:/ipfs/QmerRLZmojENXg816AjVBwmjWpUFUHPTGFboirRCotZr3L"
			]
		},
		"@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
			"keccak256": "0xd9b0b8ee1ac6dfee14eb1ad4383a4739dbaa0f2036594bb3a16f0408085dadde",
			"license": "MIT",
			"urls": [
				"bzz-raw://6309805132e519162d1134c67df22dd963323a9208b4f41344a4c13ed63c1026",
				"dweb:/ipfs/QmTBPHnf6qbtAD4NVnKVFmubUHRqMDPLkseR6apxTUpsQo"
			]
		},
		"@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
			"keccak256": "0xe64b3445a3f638890af7ad92464cd18f1f202a2f5a7ed42dabf74317bae43303",
			"license": "MIT",
			"urls": [
				"bzz-raw://6620b77b8dcd786149534b1c664f94ff1f8bb1ad141e8da7d9ec64b9624c73f0",
				"dweb:/ipfs/QmVWHh5UvQ7PxRUtUNfd94mSxxxStuzV1NBZtLiKqKpBrQ"
			]
		},
		"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
			"keccak256": "0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3",
			"license": "MIT",
			"urls": [
				"bzz-raw://25addbda49a578b3318130585601344c5149a5549d749adf88e9685349a46b23",
				"dweb:/ipfs/Qme2DuD8gpsve1ZvaSMQpBwMdpU7yAtekDwr7gUp8dX4zX"
			]
		},
		"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
			"keccak256": "0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68",
			"license": "MIT",
			"urls": [
				"bzz-raw://280e17738a67b06dae02fec32982bd48a8ab71d8df95e9975ae03532634bc522",
				"dweb:/ipfs/QmecjsNcFgy2mMjuNfRDkLpAYMRWnh5o73fw1Bj2rCso2z"
			]
		},
		"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol": {
			"keccak256": "0xc26cd2e2bcf59b87c986fc653545b35010db9c585a3f3312fe61d7b1b3805735",
			"license": "MIT",
			"urls": [
				"bzz-raw://46fe54b0ac3ee60bdff012fae7d13c1171dff433aa4fdd356fd06ce46fbe711b",
				"dweb:/ipfs/QmTTm6jBY6jQ6fx1cnCT4YepEV2aQvqLme5TSxuidfpf2q"
			]
		},
		"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol": {
			"keccak256": "0x3dd5e1a66a56f30302108a1da97d677a42b1daa60e503696b2bcbbf3e4c95bcb",
			"license": "MIT",
			"urls": [
				"bzz-raw://0808de0ae4918c664643c885ca7fa6503e8ef2bd75609dfc85152c0128a3422d",
				"dweb:/ipfs/QmNrhFC1XgBKuuxfahFeiwi1MCdu3FLNpHj2uStgmf4iJj"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721.sol": {
			"keccak256": "0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4",
			"license": "MIT",
			"urls": [
				"bzz-raw://2f8f2a76e23b02fc69e8cd24c3cb47da6c7af3a2d6c3a382f8ac25c6e094ade7",
				"dweb:/ipfs/QmPV4ZS4tPVv4mTCf9ejyZ1ai57EEibDRj7mN2ARDCLV5n"
			]
		},
		"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
			"keccak256": "0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49",
			"license": "MIT",
			"urls": [
				"bzz-raw://d01e0b2b837ee2f628545e54d8715b49c7ef2befd08356c2e7f6c50dde8a1c22",
				"dweb:/ipfs/QmWBAn6y2D1xgftci97Z3qR9tQnkvwQpYwFwkTvDMvqU4i"
			]
		},
		"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
			"keccak256": "0xaad20f8713b5cd98114278482d5d91b9758f9727048527d582e8e88fd4901fd8",
			"license": "MIT",
			"urls": [
				"bzz-raw://5396e8dbb000c2fada59b7d2093b9c7c870fd09413ab0fdaba45d882959c6244",
				"dweb:/ipfs/QmXQn5XckSiUsUBpMYuiFeqnojRX4rKa9jmgjCPeTuPmhh"
			]
		},
		"@openzeppelin/contracts/utils/Arrays.sol": {
			"keccak256": "0x8806d620b6571932b662cfd48fbd518d4f70df1f88a23b5724cacde64a77bda1",
			"license": "MIT",
			"urls": [
				"bzz-raw://8043304c8f9e1c1dc4a41935efa067daa77ad7abbae1fda41f015d53fbf327a5",
				"dweb:/ipfs/QmTrF2hSkRZoN9EEu8zdEhBpGNZ7RxzCdXf9ydzc2HQ3tM"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3",
			"license": "MIT",
			"urls": [
				"bzz-raw://0c4e6cb30d3601e2f7af5af09e265508147cb275a8dcd99d6f7363645cc56867",
				"dweb:/ipfs/QmNgFkoXNWoUbAyw71rr1sKQ95Rj2GfvYiWg79xEYDn2NY"
			]
		},
		"@openzeppelin/contracts/utils/Create2.sol": {
			"keccak256": "0x2b9807d194b92f1068d868e9587d27037264a9a067c778486f86ae21c61cbd5e",
			"license": "MIT",
			"urls": [
				"bzz-raw://22d71f40aa38a20cf466d8647452a6e3f746353474f8c8af40f03aa8cae38420",
				"dweb:/ipfs/QmQ752Hz5av7YDK8pFojzb5qgeXQvfsdkdwkHVzaXoYAZR"
			]
		},
		"@openzeppelin/contracts/utils/StorageSlot.sol": {
			"keccak256": "0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418",
			"license": "MIT",
			"urls": [
				"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c",
				"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
			"keccak256": "0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf",
			"license": "MIT",
			"urls": [
				"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c",
				"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF"
			]
		},
		"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol": {
			"keccak256": "0x6b11eb41a228cca35d4b662b4df69fcd75192851365102690f57b2ac01e83fe6",
			"license": "MIT",
			"urls": [
				"bzz-raw://ab006a2983ed350d2af21ddcdd835dcae3b8340086cc4d088460da5abd041f69",
				"dweb:/ipfs/QmbEacDhkJZiGrgzLjB4pNtE8Z1uudjDw1DvcDUTVQFsLG"
			]
		},
		"@openzeppelin/contracts/utils/introspection/ERC165.sol": {
			"keccak256": "0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133",
			"license": "MIT",
			"urls": [
				"bzz-raw://1777404f1dcd0fac188e55a288724ec3c67b45288e49cc64723e95e702b49ab8",
				"dweb:/ipfs/QmZFdC626GButBApwDUvvTnUzdinevC3B24d7yyh57XkiA"
			]
		},
		"@openzeppelin/contracts/utils/introspection/IERC165.sol": {
			"keccak256": "0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b",
			"license": "MIT",
			"urls": [
				"bzz-raw://87b3541437c8c443ccd36795e56a338ed12855eec17f8da624511b8d1a7e14df",
				"dweb:/ipfs/QmeJQCtZrQjtJLr6u7ZHWeH3pBnjtLWzvRrKViAi7UZqxL"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d",
			"license": "MIT",
			"urls": [
				"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875",
				"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeMath.sol": {
			"keccak256": "0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a",
			"license": "MIT",
			"urls": [
				"bzz-raw://ef8e012e946dec20e59f2d4446f4b44bb098f3fa8bac103b1b5112fff777447b",
				"dweb:/ipfs/QmVTooKWcLkJ9W68yNX4MgdrbAKiAXwuRN9A7f4NkdcdtQ"
			]
		},
		"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol": {
			"keccak256": "0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://095ce0626b41318c772b3ebf19d548282607f6a8f3d6c41c13edfbd5370c8652",
				"dweb:/ipfs/QmVDZfJJ89UUCE1hMyzqpkZAtQ8jUsBgZNE5AMRG7RzRFS"
			]
		},
		"contracts/contracts-main/src/AccountV3.sol": {
			"keccak256": "0xa3600fe86859f9c8dcbe0cc89dbc514e6c2ae4aec199d5c6564a71912f042f03",
			"license": "MIT",
			"urls": [
				"bzz-raw://e576c3bd7ac2ad2a555074fe4df6217ae1366c76c231d9f5653ffa5d4a82f3cb",
				"dweb:/ipfs/QmUsEK7x7RusGGcDnn5bpse8ZbaeZ6CZRdMSS5fsR2htUC"
			]
		},
		"contracts/contracts-main/src/abstract/ERC4337Account.sol": {
			"keccak256": "0x8ca8dc41c5662b61f8be119d8db45c70f876a706adf7848c97a2959997ecc9b7",
			"license": "MIT",
			"urls": [
				"bzz-raw://9dc5a4bbd0e782c959663282504986cadb7e6d18ca90a058801648f70a94c7e6",
				"dweb:/ipfs/QmY9nhngJKd2ADzGe4FH6yJza8gadszV3dndmS1mo5Ltew"
			]
		},
		"contracts/contracts-main/src/abstract/ERC6551Account.sol": {
			"keccak256": "0x36e4f2401772d54c2185541f9ef4e2342b8be86c494d60ae2b49dfabb353f753",
			"license": "MIT",
			"urls": [
				"bzz-raw://421db22dcede0154c219f7392d51717f39f898a7e89595a5334b35fa922171ce",
				"dweb:/ipfs/QmesjN9LE3wszEYdZyXpzpQ5xxXePbA53d8erwKuKbtS1k"
			]
		},
		"contracts/contracts-main/src/abstract/Lockable.sol": {
			"keccak256": "0x907f2b386ca9bed6fc835cf57ef9aedb11c4f1e709fb3ff7528e10177dba631d",
			"license": "MIT",
			"urls": [
				"bzz-raw://663683ed3982befef174a624619d9a4f36490da74a0a8c5ff5e7be8582678f91",
				"dweb:/ipfs/QmQuNrkCccb9S5eUiX3U9YPHQovXY8i99UMJ2gFX5z2Xac"
			]
		},
		"contracts/contracts-main/src/abstract/Overridable.sol": {
			"keccak256": "0x10a718442b79024644363bc5a43e99d958999d5b626e72c687e96ac9c73f2eb2",
			"license": "MIT",
			"urls": [
				"bzz-raw://0e88fcbd159995bf135d65edf508437591245b845b9bdb3363ae8ae35054bcd0",
				"dweb:/ipfs/QmXTgRNRXFRtVGRTRVp9hiSdQqJbypeG4fg2ieeRTFx3qN"
			]
		},
		"contracts/contracts-main/src/abstract/Permissioned.sol": {
			"keccak256": "0x6a3bc074b29c61cfe9adeadf689f4147d883ec45b5a4bc5a60eb2c9a069b8cac",
			"license": "MIT",
			"urls": [
				"bzz-raw://44082d7c444c1558d64787aad7adc9a1f66ab3ca488dc18b11bba8a12088b23a",
				"dweb:/ipfs/QmZPmgEX9gxc3WvSFddjymuverpXRdBp1wdf32vqxpmsKv"
			]
		},
		"contracts/contracts-main/src/abstract/Signatory.sol": {
			"keccak256": "0x620a5ece43cebc4023cb39a9366bf50bef92ba917769de722677b9d8ea354364",
			"license": "MIT",
			"urls": [
				"bzz-raw://40d0f6869df4aba2881c3049df17e1783eb3b14b83ec6905119db944e62ba476",
				"dweb:/ipfs/QmPanoPZJv1YZwePjpFnxyGqZpTt2694njG9oRPtT1DaSZ"
			]
		},
		"contracts/contracts-main/src/abstract/execution/BaseExecutor.sol": {
			"keccak256": "0x6af27e9d7ec223726da0e1e6e663829c5340666bc9b9b5501702abb13b3d1a46",
			"license": "MIT",
			"urls": [
				"bzz-raw://e808c9e0e7a9f8d4facc3cec783d77522ad9abb260476b7de1cd5497bc25c7a8",
				"dweb:/ipfs/QmctBxVQUrLRMUdRcJiKxxGjdypkgAXt9FR4eW177UsA8i"
			]
		},
		"contracts/contracts-main/src/abstract/execution/BatchExecutor.sol": {
			"keccak256": "0x0566e90d040781a3a81b6eb62d28e8b9726a81a775d98294e7ba3cb75aefa9b8",
			"license": "MIT",
			"urls": [
				"bzz-raw://0f4a824e2c7fc3bcf4e9b8068c62889e458e561da79efb49f08a4a7ae3ecc1ef",
				"dweb:/ipfs/QmZrxxdFuhxTf7BpnWkGazhVfZmRECx9Q5s5UgzkmYoUfk"
			]
		},
		"contracts/contracts-main/src/abstract/execution/ERC6551Executor.sol": {
			"keccak256": "0xe03f58b3403525a2dc35b07ceb3a8072c6860408c30759e41284b22092ae8849",
			"license": "MIT",
			"urls": [
				"bzz-raw://1f85eb23884c1b2de38501eb1918d40e021ca63152676417f55d5b5b08193cb1",
				"dweb:/ipfs/QmQb2CRm8QwKJwjgUWaaoJAMCt4BtkLM6ek1bfWgEp65Y4"
			]
		},
		"contracts/contracts-main/src/abstract/execution/NestedAccountExecutor.sol": {
			"keccak256": "0xe4a04e3857327ce111c38da72bf00fb669c9d3d1c16c821ee20e1049a9a8844f",
			"license": "MIT",
			"urls": [
				"bzz-raw://5c681ab5d0fae16752eb81d970948bb143142ffa0fc495bc3710a4195e5f656e",
				"dweb:/ipfs/QmSkhyvZT34YGviiTepb2BqoLqnLdjxLFX63gD22eYgYCM"
			]
		},
		"contracts/contracts-main/src/abstract/execution/SandboxExecutor.sol": {
			"keccak256": "0xce750479d412b7dee194d8822c586116cce85301a720ea3202ca4b6cbd764449",
			"license": "MIT",
			"urls": [
				"bzz-raw://e44f0128605c8b55876399b82ae760a14a40d1d2a98430188aab5eb285893373",
				"dweb:/ipfs/QmNid4g7Xf9cRkCdwTPXhp394tQN89MtPCraW2TNSQrXSK"
			]
		},
		"contracts/contracts-main/src/abstract/execution/TokenboundExecutor.sol": {
			"keccak256": "0x6c186373845da8b515f2f8e2bd631a81906467c16779e693d7188eb9e6d9c2bd",
			"license": "MIT",
			"urls": [
				"bzz-raw://e2c0127458c5cac123d77f04d0d4e6d0e4774e4f40916eb3ffbd6e3c7c309571",
				"dweb:/ipfs/QmcvAKLVZ2wXMiABe5LZT6wZ8uSkyLo75UDgCWaSwQdhmx"
			]
		},
		"contracts/contracts-main/src/interfaces/IAccountGuardian.sol": {
			"keccak256": "0x968ab4635e1c5560f5be6fc3919f779a6f7a561638d89e0ce7c20e6a3a145fc9",
			"license": "MIT",
			"urls": [
				"bzz-raw://a28aed8f97020bbcaa6623531e9af37dcf91e529a61efa4bc8f08648898652a3",
				"dweb:/ipfs/QmUHs37jnkBUcfG3qpBarqroGKofBedovutnaLUSFCB8eP"
			]
		},
		"contracts/contracts-main/src/interfaces/ISandboxExecutor.sol": {
			"keccak256": "0x71ce7729ba03d2c728f8689910ffe89a1dbb56ff9668ca9157f0877e52aee62b",
			"license": "MIT",
			"urls": [
				"bzz-raw://3232e9888eddec23b1f6f9f30e5fe9fb79d7b8ef5e2b6e4d467be9407526d3fd",
				"dweb:/ipfs/QmTaBLwrcg6DK6EYeoP2fms4Qq1DFndjC2iGvLXicyHfrW"
			]
		},
		"contracts/contracts-main/src/interfaces/ISwapRouter.sol": {
			"keccak256": "0xe9a779567209c22e9b27a0150d542187c880c7bf64594a59dbae3a3c2f21c072",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://868a21ba521cb320ea85a85af3dc20dd24cd8c08be7d08cefae6a0c2b005c415",
				"dweb:/ipfs/QmQVgGtDhNSP3kqSgZfYJR59SmXNRLHLHovM7qobgNnhsn"
			]
		},
		"contracts/contracts-main/src/lib/LibExecutor.sol": {
			"keccak256": "0x200e3b222b58d3db324b2dc4be466c33a985f007163202c95bf2a00961649081",
			"license": "MIT",
			"urls": [
				"bzz-raw://eab4420e0010f2f43b56452758d8f43b78863c98c5b39aabb0386fe1d2aafdb9",
				"dweb:/ipfs/QmZVn14sd2JsaXe9n6cJjbqpztgq7e3FCrWEnLtv4oJfQz"
			]
		},
		"contracts/contracts-main/src/lib/LibSandbox.sol": {
			"keccak256": "0x2b9e052e12b3a43fbdc9ebb243e06b1c5c9ffaae48a7790eaa1529d154ddb286",
			"license": "MIT",
			"urls": [
				"bzz-raw://aa58c01e094f61cb340c7a2aceaf05afeeae903fcd36d76afbfbb0782d73776b",
				"dweb:/ipfs/QmcrsiZ7Han2j5kg7yqmm9W2SCMehJ1wPv57wE4Rqr6rEz"
			]
		},
		"contracts/contracts-main/src/lib/OPAddressAliasHelper.sol": {
			"keccak256": "0x3dc3691c07a7de59ac828ff82a7dca2a4189b60ab1d20de5f0de00cf2f7008ee",
			"license": "MIT",
			"urls": [
				"bzz-raw://6ca4d531a3842f143eb1115807cb0ce238907bd30f1cf7df5c066452bbc9a525",
				"dweb:/ipfs/QmUgFsEz7VGgmbtqwucEXH6bnVruAeeL9RjMR3H7uYkZXz"
			]
		},
		"contracts/contracts-main/src/utils/Errors.sol": {
			"keccak256": "0xe76252f43b7e3c4ff98b3cfeab9cbd506d71e44d9524f394d2f17e93a9090db5",
			"license": "MIT",
			"urls": [
				"bzz-raw://8aa0e6cb301d21bc320f410c92aa1c8975ae67f301510fd31e49211b67aeebec",
				"dweb:/ipfs/QmTjgtHmHAwJkMvUxkxKRwgWu9L2C7PdbdqeEd4Ekdt7AB"
			]
		},
		"erc6551/interfaces/IERC6551Account.sol": {
			"keccak256": "0xda097894cc052f451ad669c5a07a9eda3f53a948f8080714850dc68cc1040b42",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ca48dd1eff4f9eee3699a6800c09c4d208d103862f2a55d66286e8eb4b7771e",
				"dweb:/ipfs/QmX2KX2fmUV5rbVoJSAq6BTVVwxK1Jy169dRJN2h8UCNLz"
			]
		},
		"erc6551/interfaces/IERC6551Executable.sol": {
			"keccak256": "0x9bdb7a7e324bf36203ec6ff68c454446cae3993c1054b0356a081fa52ec43a29",
			"license": "MIT",
			"urls": [
				"bzz-raw://a9c6187c6633ec42ccb0ae5fdf4f1791fad7a505f29c8b55b1a5fe3ec9ee0148",
				"dweb:/ipfs/QmeANTvdkBMZeumsw6Qe7MHEjgkHJTLju4oQtAfo9HLzNV"
			]
		},
		"erc6551/lib/ERC6551AccountLib.sol": {
			"keccak256": "0x49e81d01b3aef13b314a6667e4811089a78ad03dfad5cd430b00be2f9ed8ea34",
			"license": "MIT",
			"urls": [
				"bzz-raw://46b60a9d293324e56f59937e2a4d3a79ef4f69847868b5bbc3d81bcd6d1981a7",
				"dweb:/ipfs/QmTgv7s9kf8UxdXuR1TswCQLguKueVwbABahPLnfJRUXfB"
			]
		},
		"erc6551/lib/ERC6551BytecodeLib.sol": {
			"keccak256": "0xc6a20fb273cbe33fa8d9591aaeb6a9f24b8fd9944f8d0017f4bf5b26614731f9",
			"license": "MIT",
			"urls": [
				"bzz-raw://740fed446bda3effacea6fa48d23a7d23911363e353bd12c5171b2b21b996acf",
				"dweb:/ipfs/QmNbWP8UkANAUGCc4ZcjfyKDBi89KjSunFQEvnhpXLBFt4"
			]
		},
		"https://github.com/eth-infinitism/account-abstraction/blob/develop/contracts/core/BaseAccount.sol": {
			"keccak256": "0xe7946dabc50aca99677c47fb74b00906684af62b17b721cb8a24c21006f76102",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://4e5af9f24431a568c55083600875d7aeafd0addea64f72273b679a1470feb0e6",
				"dweb:/ipfs/Qmd4EQESCKX9nhYtEtX93WNVHGMfcXCCfsavUdBKoQMS7T"
			]
		},
		"https://github.com/eth-infinitism/account-abstraction/blob/develop/contracts/core/Helpers.sol": {
			"keccak256": "0x81b70ea6183fd28e6c00dc3cf357c8453abdd4cc46ec628e7589e4b6a188d626",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://f4a99aced25a842721a2495760af84b874c1f730c94f8b3e76c71c8b757c90f5",
				"dweb:/ipfs/QmacEJqVFbwQxE4HTzqvWWAFT7uSbH2Yd7EMqdCx1DxzBz"
			]
		},
		"https://github.com/eth-infinitism/account-abstraction/blob/develop/contracts/core/UserOperationLib.sol": {
			"keccak256": "0x1e28b1f8dac93be686129400777b000c960b0bcc2896a2e0535806f2f0dd7cca",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://76911056faaf865efff923267e5c5b556f6b019787a2ec55ffa856bace497108",
				"dweb:/ipfs/QmSFQj5DraQNMJCrn7GWSrN6iXRJ9Q9RpcmCGZ1bZg9emR"
			]
		},
		"https://github.com/eth-infinitism/account-abstraction/blob/develop/contracts/interfaces/IAccount.sol": {
			"keccak256": "0x1a11613e6921d1a55ba72169156842ba7d30e966d40a23b34b29c88d1f82345e",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://2bdd695221a8d884d4603d46b5389cc2cdda5cba70f49b57a98e9fba1b9fd2c5",
				"dweb:/ipfs/QmZyHFwzpRgfa4YgzY4MUbNdj8WSGCjMHw2AxW4LVnMLWE"
			]
		},
		"https://github.com/eth-infinitism/account-abstraction/blob/develop/contracts/interfaces/IAggregator.sol": {
			"keccak256": "0xfc37d01c654f967c0f33b0edcb074231d30841f6fe1b23a070564f13c497b111",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://490630958f3a1861ad16db742e891b8c9f6f229a11f942d25ff58e9bab983c37",
				"dweb:/ipfs/QmYcvJxvXrXWvDUp6XZZirzjMqk5BaWdmsWWsEtamiuDu9"
			]
		},
		"https://github.com/eth-infinitism/account-abstraction/blob/develop/contracts/interfaces/IEntryPoint.sol": {
			"keccak256": "0x9cdadcebb6491f50a7c136e560f1eb51e785a79ebfa29605a0c5eee3c60adb19",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://236356329adad328f489629e53a141f8842fa00ad42c16cf9ea031cfe77bfa82",
				"dweb:/ipfs/QmRgjTghLaTcA3xbx6vcfVu6aCUK6W1iN8JS8ric2DPy1x"
			]
		},
		"https://github.com/eth-infinitism/account-abstraction/blob/develop/contracts/interfaces/INonceManager.sol": {
			"keccak256": "0x509871e6c63663cdcc3eba19920fe84e991f38b289b1377ac3c3a6d9f22d7e12",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://00fe21b4349b24c50df60e1a705179293982bd9e7a32b78d4bac9620f89e7fe2",
				"dweb:/ipfs/QmSFFYGfUwQbVa6hASjU7YxTvgi2HkfrPr4X5oPHscHg8b"
			]
		},
		"https://github.com/eth-infinitism/account-abstraction/blob/develop/contracts/interfaces/IStakeManager.sol": {
			"keccak256": "0x10cdaa14cd2b08279e02c2d4863cea18cfb7e11d7a33cf740755f9a025e7bda1",
			"license": "GPL-3.0-only",
			"urls": [
				"bzz-raw://3d214ceee25812bb2a8176dd245a399d84d222cf7f9cf0bc3937afad372f0b7a",
				"dweb:/ipfs/QmZxqSic8cGeis7R7ufUjf95CgTpyAFY9nCHuiLPbESbYr"
			]
		},
		"https://github.com/eth-infinitism/account-abstraction/blob/develop/contracts/interfaces/UserOperation.sol": {
			"keccak256": "0x093777cb7097dccaffd631d07dfdbd0f731371efe3770fbe22a0c992af4eb4f6",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://6da218e65b43a3f99247b2c66c5946eaa48f2719a0f58469d3a80b4d24b28f00",
				"dweb:/ipfs/QmQ3np8AwPkWw9Ey4DMMQNJgPSVw3fdrX8wnLaVgYyiaQn"
			]
		}
	},
	"version": 1
}